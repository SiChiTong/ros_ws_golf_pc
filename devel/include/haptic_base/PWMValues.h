// Generated by gencpp from file haptic_base/PWMValues.msg
// DO NOT EDIT!


#ifndef HAPTIC_BASE_MESSAGE_PWMVALUES_H
#define HAPTIC_BASE_MESSAGE_PWMVALUES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace haptic_base
{
template <class ContainerAllocator>
struct PWMValues_
{
  typedef PWMValues_<ContainerAllocator> Type;

  PWMValues_()
    : pwm0(0)
    , pwm1(0)
    , pwm2(0)
    , pwm3(0)
    , pwm4(0)
    , pwm5(0)  {
    }
  PWMValues_(const ContainerAllocator& _alloc)
    : pwm0(0)
    , pwm1(0)
    , pwm2(0)
    , pwm3(0)
    , pwm4(0)
    , pwm5(0)  {
  (void)_alloc;
    }



   typedef int16_t _pwm0_type;
  _pwm0_type pwm0;

   typedef int16_t _pwm1_type;
  _pwm1_type pwm1;

   typedef int16_t _pwm2_type;
  _pwm2_type pwm2;

   typedef int16_t _pwm3_type;
  _pwm3_type pwm3;

   typedef int16_t _pwm4_type;
  _pwm4_type pwm4;

   typedef int16_t _pwm5_type;
  _pwm5_type pwm5;




  typedef boost::shared_ptr< ::haptic_base::PWMValues_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::haptic_base::PWMValues_<ContainerAllocator> const> ConstPtr;

}; // struct PWMValues_

typedef ::haptic_base::PWMValues_<std::allocator<void> > PWMValues;

typedef boost::shared_ptr< ::haptic_base::PWMValues > PWMValuesPtr;
typedef boost::shared_ptr< ::haptic_base::PWMValues const> PWMValuesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::haptic_base::PWMValues_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::haptic_base::PWMValues_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace haptic_base

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'haptic_base': ['/home/raven/ros_ws/src/haptic_base/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::haptic_base::PWMValues_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::haptic_base::PWMValues_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::haptic_base::PWMValues_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::haptic_base::PWMValues_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::haptic_base::PWMValues_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::haptic_base::PWMValues_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::haptic_base::PWMValues_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c8509d9fcec4bd7898a6f72820d65bc0";
  }

  static const char* value(const ::haptic_base::PWMValues_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc8509d9fcec4bd78ULL;
  static const uint64_t static_value2 = 0x98a6f72820d65bc0ULL;
};

template<class ContainerAllocator>
struct DataType< ::haptic_base::PWMValues_<ContainerAllocator> >
{
  static const char* value()
  {
    return "haptic_base/PWMValues";
  }

  static const char* value(const ::haptic_base::PWMValues_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::haptic_base::PWMValues_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 pwm0\n\
int16 pwm1\n\
int16 pwm2\n\
int16 pwm3\n\
int16 pwm4\n\
int16 pwm5\n\
";
  }

  static const char* value(const ::haptic_base::PWMValues_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::haptic_base::PWMValues_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pwm0);
      stream.next(m.pwm1);
      stream.next(m.pwm2);
      stream.next(m.pwm3);
      stream.next(m.pwm4);
      stream.next(m.pwm5);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PWMValues_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::haptic_base::PWMValues_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::haptic_base::PWMValues_<ContainerAllocator>& v)
  {
    s << indent << "pwm0: ";
    Printer<int16_t>::stream(s, indent + "  ", v.pwm0);
    s << indent << "pwm1: ";
    Printer<int16_t>::stream(s, indent + "  ", v.pwm1);
    s << indent << "pwm2: ";
    Printer<int16_t>::stream(s, indent + "  ", v.pwm2);
    s << indent << "pwm3: ";
    Printer<int16_t>::stream(s, indent + "  ", v.pwm3);
    s << indent << "pwm4: ";
    Printer<int16_t>::stream(s, indent + "  ", v.pwm4);
    s << indent << "pwm5: ";
    Printer<int16_t>::stream(s, indent + "  ", v.pwm5);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HAPTIC_BASE_MESSAGE_PWMVALUES_H
