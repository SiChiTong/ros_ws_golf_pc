// Generated by gencpp from file haptic_base/PutterValues.msg
// DO NOT EDIT!


#ifndef HAPTIC_BASE_MESSAGE_PUTTERVALUES_H
#define HAPTIC_BASE_MESSAGE_PUTTERVALUES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace haptic_base
{
template <class ContainerAllocator>
struct PutterValues_
{
  typedef PutterValues_<ContainerAllocator> Type;

  PutterValues_()
    : duty_values()
    , interval_values()  {
      duty_values.assign(0);

      interval_values.assign(0.0);
  }
  PutterValues_(const ContainerAllocator& _alloc)
    : duty_values()
    , interval_values()  {
  (void)_alloc;
      duty_values.assign(0);

      interval_values.assign(0.0);
  }



   typedef boost::array<int16_t, 4>  _duty_values_type;
  _duty_values_type duty_values;

   typedef boost::array<double, 4>  _interval_values_type;
  _interval_values_type interval_values;




  typedef boost::shared_ptr< ::haptic_base::PutterValues_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::haptic_base::PutterValues_<ContainerAllocator> const> ConstPtr;

}; // struct PutterValues_

typedef ::haptic_base::PutterValues_<std::allocator<void> > PutterValues;

typedef boost::shared_ptr< ::haptic_base::PutterValues > PutterValuesPtr;
typedef boost::shared_ptr< ::haptic_base::PutterValues const> PutterValuesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::haptic_base::PutterValues_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::haptic_base::PutterValues_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace haptic_base

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'haptic_base': ['/home/raven/ros_ws/src/haptic_base/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::haptic_base::PutterValues_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::haptic_base::PutterValues_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::haptic_base::PutterValues_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::haptic_base::PutterValues_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::haptic_base::PutterValues_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::haptic_base::PutterValues_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::haptic_base::PutterValues_<ContainerAllocator> >
{
  static const char* value()
  {
    return "deae48c081a898661e9df48b433768e7";
  }

  static const char* value(const ::haptic_base::PutterValues_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdeae48c081a89866ULL;
  static const uint64_t static_value2 = 0x1e9df48b433768e7ULL;
};

template<class ContainerAllocator>
struct DataType< ::haptic_base::PutterValues_<ContainerAllocator> >
{
  static const char* value()
  {
    return "haptic_base/PutterValues";
  }

  static const char* value(const ::haptic_base::PutterValues_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::haptic_base::PutterValues_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16[4] duty_values\n\
float64[4] interval_values\n\
";
  }

  static const char* value(const ::haptic_base::PutterValues_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::haptic_base::PutterValues_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.duty_values);
      stream.next(m.interval_values);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PutterValues_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::haptic_base::PutterValues_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::haptic_base::PutterValues_<ContainerAllocator>& v)
  {
    s << indent << "duty_values[]" << std::endl;
    for (size_t i = 0; i < v.duty_values.size(); ++i)
    {
      s << indent << "  duty_values[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.duty_values[i]);
    }
    s << indent << "interval_values[]" << std::endl;
    for (size_t i = 0; i < v.interval_values.size(); ++i)
    {
      s << indent << "  interval_values[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.interval_values[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // HAPTIC_BASE_MESSAGE_PUTTERVALUES_H
